/*
 * Netmaker
 *
 * # API Usage  Most actions that can be performed via API can be performed via UI. We recommend managing your networks using the official netmaker-ui project. However, Netmaker can also be run without the UI, and all functions can be achieved via API calls. If your use case requires using Netmaker without the UI or you need to do some troubleshooting/advanced configuration, using the API directly may help.  # Authentication  API calls must be authenticated via a header of the format -H “Authorization: Bearer <YOUR_SECRET_KEY>” There are two methods to obtain YOUR_SECRET_KEY: 1. Using the masterkey. By default, this value is “secret key,” but you should change this on your instance and keep it secure. This value can be set via env var at startup or in a config file (config/environments/< env >.yaml). See the [Netmaker](https://docs.netmaker.org/index.html) documentation for more details. 2. Using a JWT received for a node. This can be retrieved by calling the /api/nodes/<network>/authenticate endpoint, as documented below.
 *
 * API version: 0.24.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

// Because the zero value of some Go types may be significant to WireGuard for PeerConfig fields, pointer types are used for some of these fields. Only pointer fields which are not nil will be applied when configuring a peer.
type PeerConfig struct {
	// AllowedIPs specifies a list of allowed IP addresses in CIDR notation for this peer.
	AllowedIPs []IpNet `json:"AllowedIPs,omitempty"`
	Endpoint *UdpAddr `json:"Endpoint,omitempty"`
	PersistentKeepaliveInterval *Duration `json:"PersistentKeepaliveInterval,omitempty"`
	PresharedKey *Key `json:"PresharedKey,omitempty"`
	PublicKey *Key `json:"PublicKey,omitempty"`
	// Remove specifies if the peer with this public key should be removed from a device's peer list.
	Remove bool `json:"Remove,omitempty"`
	// ReplaceAllowedIPs specifies if the allowed IPs specified in this peer configuration should replace any existing ones, instead of appending them to the allowed IPs list.
	ReplaceAllowedIPs bool `json:"ReplaceAllowedIPs,omitempty"`
	// UpdateOnly specifies that an operation will only occur on this peer if the peer already exists as part of the interface.
	UpdateOnly bool `json:"UpdateOnly,omitempty"`
}
