/*
 * Netmaker
 *
 * # API Usage  Most actions that can be performed via API can be performed via UI. We recommend managing your networks using the official netmaker-ui project. However, Netmaker can also be run without the UI, and all functions can be achieved via API calls. If your use case requires using Netmaker without the UI or you need to do some troubleshooting/advanced configuration, using the API directly may help.  # Authentication  API calls must be authenticated via a header of the format -H “Authorization: Bearer <YOUR_SECRET_KEY>” There are two methods to obtain YOUR_SECRET_KEY: 1. Using the masterkey. By default, this value is “secret key,” but you should change this on your instance and keep it secure. This value can be set via env var at startup or in a config file (config/environments/< env >.yaml). See the [Netmaker](https://docs.netmaker.org/index.html) documentation for more details. 2. Using a JWT received for a node. This can be retrieved by calling the /api/nodes/<network>/authenticate endpoint, as documented below.
 *
 * API version: 0.24.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"time"
)

// Node - a model of a network node
type Node struct {
	Action string `json:"action,omitempty"`
	Address *IpNet `json:"address,omitempty"`
	Address6 *IpNet `json:"address6,omitempty"`
	Connected bool `json:"connected,omitempty"`
	// == PRO ==
	Defaultacl string `json:"defaultacl,omitempty"`
	Dnson bool `json:"dnson,omitempty"`
	Egressgatewaynatenabled bool `json:"egressgatewaynatenabled,omitempty"`
	Egressgatewayranges []string `json:"egressgatewayranges,omitempty"`
	Egressgatewayrequest *EgressGatewayRequest `json:"egressgatewayrequest,omitempty"`
	Expdatetime time.Time `json:"expdatetime,omitempty"`
	FailOverPeers map[string]interface{} `json:"fail_over_peers,omitempty"`
	FailedOverBy string `json:"failed_over_by,omitempty"`
	Hostid string `json:"hostid,omitempty"`
	Id string `json:"id,omitempty"`
	InetNodeReq *InetNodeReq `json:"inet_node_req,omitempty"`
	Ingressdns string `json:"ingressdns,omitempty"`
	Ingressgatewayrange string `json:"ingressgatewayrange,omitempty"`
	Ingressgatewayrange6 string `json:"ingressgatewayrange6,omitempty"`
	InternetgwNodeId string `json:"internetgw_node_id,omitempty"`
	IsFailOver bool `json:"is_fail_over,omitempty"`
	Isegressgateway bool `json:"isegressgateway,omitempty"`
	Isingressgateway bool `json:"isingressgateway,omitempty"`
	Isinternetgateway bool `json:"isinternetgateway,omitempty"`
	Isrelay bool `json:"isrelay,omitempty"`
	Isrelayed bool `json:"isrelayed,omitempty"`
	Lastcheckin time.Time `json:"lastcheckin,omitempty"`
	Lastmodified time.Time `json:"lastmodified,omitempty"`
	Lastpeerupdate time.Time `json:"lastpeerupdate,omitempty"`
	Localaddress *IpNet `json:"localaddress,omitempty"`
	Metadata string `json:"metadata,omitempty"`
	Network string `json:"network,omitempty"`
	Networkrange *IpNet `json:"networkrange,omitempty"`
	Networkrange6 *IpNet `json:"networkrange6,omitempty"`
	Ownerid string `json:"ownerid,omitempty"`
	Pendingdelete bool `json:"pendingdelete,omitempty"`
	Relayedby string `json:"relayedby,omitempty"`
	Relaynodes []string `json:"relaynodes,omitempty"`
	Server string `json:"server,omitempty"`
}
